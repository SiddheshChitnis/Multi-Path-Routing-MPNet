#include <arpa/inet.h>
#include <sys/socket.h>
#include <netdb.h>
#include <ifaddrs.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include<stdbool.h>
struct routing
{
char ip[15];
int x;
int y;
};
int main()
{
void distance(int xs, int ys, int xd, int yd);
char ip1[15],hostip[15];
 struct ifaddrs *ifaddr, *ifa;
    int family, s;
    char host[NI_MAXHOST];

    if (getifaddrs(&ifaddr) == -1)
    {
        perror("getifaddrs");
      
   }
    for (ifa = ifaddr; ifa != NULL; ifa = ifa->ifa_next)
    {
        if (ifa->ifa_addr == NULL)
            continue;

        s=getnameinfo(ifa->ifa_addr,sizeof(struct sockaddr_in),host, NI_MAXHOST, NULL, 0, NI_NUMERICHOST);

        if((strcmp(ifa->ifa_name,"wlan0")==0)&&(ifa->ifa_addr->sa_family==AF_INET))
        {
            if (s != 0)
            {
                printf("getnameinfo() failed: %s\n", gai_strerror(s));
                
            }

            //printf("%s\n", host);
            strcpy(ip1,host);	
	    //printf("%s\n", ip);
	}
    }
	strcpy(hostip,ip1);
    freeifaddrs(ifaddr);

int i=0;
int j=0;
for(i=0;i<=14;i++)
{
if(ip1[i]=='.')
{
j++;
if(j==3)
{
ip1[i+1]='*';
for(i=i+2;i<=14;i++)
{
ip1[i]=NULL;
}
}
}
}


printf("%s",ip1);
char cmd[100];

sprintf(cmd, "./scripteg.sh %s",ip1);
system(cmd);


FILE *file;
char buffer[20];
char *text[18];
int i1;
char k[15];



FILE *file1;
int ch = 0, i11 = 0;
        if (!(file1 = fopen("ip.txt", "r")))
    {
    fputs("could not open file!\n", stderr);

    }
    while ((ch = fgetc(file1)) != EOF)
    {
    if (ch == '\n')
    ++i11;
    }
    //fprintf(stdout, "the number of lines->%d\n", i);
fclose(file1);
struct routing t1[i11];
file = fopen("ip.txt", "r");
if(!file) {
    printf("Failed");
    return 1;
}


int count = 0;

while(fgets(buffer,sizeof buffer, file) != NULL) {
    //printf("%s", buffer);
   text[count] = malloc(strlen(buffer)+1);
   strcpy(text[count],buffer);
         count++;
}
printf("\n");
for (count=0;count<i11;count++) {
        //printf("%s \n",text[count]);
        strcpy(t1[count].ip,text[count]);

        //printf("%s",t1[count].mac);
}

fclose(file);



int h,j1=0,t=0;
for(h=0;h<i11;h++)
        {
                if(j1>1)
                {t++;j1=0;}
                t1[h].x = t;
                t1[h].y = j1;


                j1++;
        }
for(i=0;i<i11;i++)
        {
                printf("(%d,%d)%s",t1[i].x,t1[i].y,t1[i].ip);
                if(i==1 || i==3 || i==5)
                      printf("\n");
        }

char ip2[15],ip3[15];
int e;
int xs1, ys1, xd1=0, yd1=0;
printf("\n Enter the des ip address:");
	scanf("%s",ip2);
	printf("Enter addr:");
	scanf("%s",ip3);
	//here;
	int c1,c2;
	for(e=0;e<i11;e++)
	{	
		int i;
		c1 = -1;
		for(i=0;i<15;i++)
		{		
		if(t1[e].ip[i]==ip3[i])
		c1++;
		}
		if(c1==strlen(ip3))
		{
				
			xs1 = t1[e].x;
			ys1 = t1[e].y;
			//printf("%d:%d",xs1,ys1);	
			//printf("%d",strlen(hostip));
		}
	}
	for(e=0;e<i11;e++)
	{
		int i;
		c2=-1;
		for(i=0;i<15;i++)
		{

		if(t1[e].ip[i]==ip2[i])
		c2++;
		}
		if(c2==strlen(ip2))
		{
		
			xd1 = t1[e].x;
			yd1 = t1[e].y;
	
		}
		//if(t1[e].ip != ip2)
		//{
		//printf("entered destination ip address doesnot exit in this network 			please reenter");
		//printf("\n Enter the des ip address:");
		//scanf("%s",&ip2[15]);
		//goto label;
		//}
	}
	printf("%d:%d\t%d:%d",xs1,ys1,xd1,yd1);
	distance(xs1,ys1,xd1,yd1);


}

void distance(int xs,int ys,int xd,int yd)
{
	
int i12=0;
int x [4];
int y [4];
if(xd>xs)
{
if(yd>ys)
{

x[0]=xs+1;
y[0]=ys;
x[1]=xs;
y[1]=ys+1;
x[2]=xs;
y[2]=ys-1;
x[3]=xs-1;
y[3]=ys;
}
else if(yd<ys)
{
x[0]=xs;
y[0]=ys-1;
x[1]=xs+1;
y[1]=ys;
x[2]=xs-1;
y[2]=ys;
x[3]=xs;
y[3]=ys+1;

}
else if(yd=ys)
{
x[0]=xs+1;
y[0]=ys;
x[1]=xs;
y[1]=ys+1;
x[2]=xs;
y[2]=ys-1;
x[3]=ys;
y[3]=xs-1;

}
}
else if(xd<xs)
{
if(yd>ys)
{
x[0]=xs-1;
y[0]=ys;
x[1]=xs;
y[1]=ys+1;
x[2]=xs+1;
y[2]=ys;
x[3]=xs;
y[3]=ys-1;
}
else if(yd<ys)
{
x[0]=xs-1;
y[0]=ys;
x[1]=xs;
y[1]=ys-1;
x[2]=xs;
y[2]=ys+1;
x[3]=ys;
y[3]=xs+1;
}
else if(yd==ys)
{
x[0]=xs-1;
y[0]=ys;
x[1]=xs+1;
y[1]=ys;
x[2]=xs;
y[2]=ys-1;
x[3]=xs;
y[3]=ys+1;

}
}
if(xs==xd)
{
if(yd>ys)
{

x[0]=xs;
y[0]=ys+1;
x[1]=xs-1;
y[1]=ys;
x[2]=xs+1;
y[2]=ys;
x[3]=xs;
y[3]=ys-1;

}
else if(yd<ys)
{
x[0]=xs;
y[0]=ys-1;
x[1]=xs;
y[1]=ys+1;
x[2]=xs+1;
y[2]=ys;
x[3]=xs-1;
y[3]=ys;
}
else if(yd==ys)
{
x[0]=xs;
y[0]=ys;
x[1]=xs;
y[1]=ys-1;
x[2]=xs+1;
y[2]=ys;
x[3]=xs-1;
y[3]=ys;
}
}
if(ys==yd)
{
if(xd>xs)
{
x[0]=xs+1;
y[0]=ys;
x[1]=xs;
y[1]=ys+1;
x[2]=xs;
y[2]=ys-1;
x[3]=xs-1;
y[3]=ys;
}
else if(xd<xs)
{
x[0]=xs-1;
y[0]=ys;
x[1]=xs;
y[1]=ys-1;
x[2]=xs;
y[2]=ys+1;
x[3]=xs+1;
y[3]=ys;
}
}

int x1 [3];
int  y1 [3];
int n=0;
char z1[3];
int i2;
int i3;
int m=0;
int j12=0;
for(i2=0;i2<=3;i2++)
{

if(x[i2]==xd && y[i2]==yd)
{
x1[0]=x[i2];
y1[0]=y[i2];
printf(" \n the x%d cordinate is: %d and y%d cordinate is : %d \n",n,x1[0],n,y1[0]);
n=1;
m=1;
}
}
for(i2=0;i2<=3;i2++)
{
if(m != 1)
{
if(x[i2]>=0 && y[i2]>=0)
{
if(x[i2]<=3 &&  y[i2]<=1)
{
if(x[i2] == xs && y[i2] == ys)
{
}
else
{

x1[n]=x[i2];
y1[n]=y[i2];
printf(" \n the x%d cordinate is: %d and y%d cordinate is : %d \n",n,x1[n],n,y1[n]);
n=n+1;
}
}
}
}
}
}
